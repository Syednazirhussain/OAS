1->submit
2->create directory  git init in command prompt
3->git status
4->git add actocat.txt
5->git status
6->To store our staged changes we run the commit command with a message describing what we've changed. Let's do that now by typing : git commit -m "Add cute octocat story"
7->git add '*.txt'
8->Okay, you've added all the text files to the staging area. Feel free to run git status to see what you're about to commit.

If it looks good, go ahead and run : git commit -m 'Add all the actocat txt files'

9-> git log history

10->Great job! We've gone ahead and created a new empty GitHub repository for you to use with Try Git at  https://github.com/try-git/try_git.git. To push our local repo to the GitHub server we'll need to add a remote repository.

This command takes a remote name and a repository URL, which in your case is https://github.com/try-git/try_git.git.

Go ahead and run git remote add with the options below: git remote add origin https://github.com/try-git/try_git.git

11->The push command tells Git where to put our commits when we're ready, and now we're ready. So let's push our local changes to our origin repo (on GitHub).

The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do. Go ahead and push it!

12->Let's pretend some time has passed. We've invited other people to our GitHub project who have pulled your changes, made their own commits, and pushed them.

We can check for changes on our GitHub repository and pull down any new changes by running: git pull origin master

13->In this case we want the diff of our most recent commit, which we can refer to using the HEAD pointer :git diff HEAD

14->Another great use for diff is looking at changes within files that have already been staged. Remember, staged files are files we have told git that are ready to be committed.

Let's use git add to stage octofamily/octodog.txt, which I just added to the family for you.

commad :  git add octofamily/octodog.txt

15->Good, now go ahead and run git diff with the --staged option to see the changes you just staged. You should see that  octodog.txt was created.

commad : git diff --staged

16->So now that octodog is part of the family, octocat is all depressed. Since we love octocat more than octodog, we'll turn his frown around by removing octodog.txt.

You can unstage files by using the git reset command. Go ahead and remove octofamily/octodog.txt : git reset octofamily/octodog.txt

17->git reset did a great job of unstaging octodog.txt, but you'll notice that he's still there. He's just not staged anymore. It would be great if we could go back to how things were before octodog came around and ruined the party.

Files can be changed back to how they were at the last commit by using the command: git checkout -- <target>. Go ahead and get rid of all the changes since the last commit for octocat.txt

command : git checkout -- octocat.txt

18->When developers are working on a feature or bug they'll often create a copy (aka. branch) of their code they can make separate commits to. Then when they're done they can merge this branch back into their main master branch.

We want to remove all these pesky octocats, so let's create a branch called clean_up, where we'll do all the work

cammand :  git branch clean_up

19->Great! Now if you type git branch you'll see two local branches: a main branch named master and your new branch named  clean_up.

You can switch branches using the git checkout <branch> command. Try it now to switch to the clean_up branch

command : git checkout clean_up

20->Ok, so you're in the clean_up branch. You can finally remove all those pesky octocats by using the git rm command which will not only remove the actual files from disk, but will also stage the removal of the files for us.

You're going to want to use a wildcard again to get all the octocats in one sweep, go ahead and run

commad :  git rm '*.txt'

21->Now that you've removed all the cats you'll need to commit your changes.

Feel free to run git status to check the changes you're about to commit

command :  git commit -m "Remove all the cats"

22->Great, you're almost finished with the cat... er the bug fix, you just need to switch back to the master branch so you can copy (or merge) your changes from the clean_up branch back into the master branch.

Go ahead and checkout the master branch

command : git checkout master

23->Alrighty, the moment has come when you have to merge your changes from the clean_up branch into the master branch. Take a deep breath, it's not that scary.

We're already on the master branch, so we just need to tell Git to merge the clean_up branch into it

command :  git merge clean_up

24->Congratulations! You just accomplished your first successful bugfix and merge. All that's left to do is clean up after yourself. Since you're done with the clean_up branch you don't need it anymore.

You can use git branch -d <branch name> to delete a branch. Go ahead and delete the clean_up branch now

command : git branch -d clean_up

25->Here we are, at the last step. I'm proud that you've made it this far, and it's been great learning Git with you. All that's left for you to do now is to push everything you've been working on to your remote repository, and you're done!

command : git push

26->Great! You now have a little taste of the greatness of Git. You can take a look at the wrap up page for a little more information on Git and GitHub, oh, and of course your badge!

command : 